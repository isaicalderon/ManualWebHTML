package com.matco.manual.bean;

import java.util.Map;

import javax.faces.application.ConfigurableNavigationHandler;
import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.context.Flash;

import com.matco.manual.controller.Mensaje;

public abstract class GenericBean {
	
	
	private FacesContext facesContext;
	private ExternalContext externalContext;
	private Map<String, Object> requestMap;
	private Map<String, Object> sessionMap;
	private Flash flash;

	public String getInitParameter(String parametro) {
		String initParameter = getFacesContext().getExternalContext().getInitParameter(parametro);
		return initParameter;
	}

	/**
	 * Pasa los mensajes que estan en Flash a la cola de mensajes a desplegar
	 */
	protected void mostrarMensajesGrid() {
		String mensajeInfo = (String) getFlash().get("mensajeInfo");

		if (mensajeInfo == null) {
			String mensajeError = (String) getFlash().get("mensajeError");
			if (mensajeError == null) {
				Mensaje mensajeWarn = (Mensaje) getFlash().get("mensajeWarnDetail");
				if (mensajeWarn == null) {
					Mensaje mensajeInfoDetail = (Mensaje) getFlash().get("mensajeInfoDetail");
					if (mensajeInfoDetail != null) {
						String summary = mensajeInfoDetail.getSummary();
						String detail = mensajeInfoDetail.getDetail();
						agregarMensajeInfo(summary, detail);
					}
				} else {
					String summary = mensajeWarn.getSummary();
					String detail = mensajeWarn.getDetail();
					agregarMensajeWarn(summary, detail);
				}
			} else {
				agregarMensajeError(mensajeError);
			}
		} else {
			agregarMensajeInfo(mensajeInfo);
		}
	}

	/**
	 * Agrega un mensaje sin detalle de tipo informativo a la cola de mensajes.
	 *
	 * @param mensaje
	 *            Mensaje informativo
	 */
	protected void agregarMensajeInfo(String mensaje) {
		FacesMessage message = new FacesMessage();
		message.setSeverity(FacesMessage.SEVERITY_INFO);
		message.setSummary(mensaje);
		message.setDetail("");
		getFacesContext().addMessage(null, message);
	}

	/**
	 * Agrega a la cola de mensajes, un mensaje tipo informativo con un detalle
	 * o explicacion detallada.
	 *
	 * @param summary
	 *            Mensaje general
	 * @param detail
	 *            Explicación detallada del mensaje
	 */
	protected void agregarMensajeInfo(String summary, String detail) {
		FacesMessage message = new FacesMessage();
		message.setSeverity(FacesMessage.SEVERITY_INFO);
		message.setSummary(summary);
		message.setDetail(detail);
		getFacesContext().addMessage(null, message);
	}

	/**
	 * Agrega un mensaje sin detalle de error a la cola de mensajes.
	 *
	 * @param mensaje
	 *            Mensaje de error
	 */
	protected void agregarMensajeError(String mensaje) {
		FacesMessage message = new FacesMessage();
		message.setSeverity(FacesMessage.SEVERITY_ERROR);
		message.setSummary(mensaje);
		message.setDetail("");
		getFacesContext().addMessage(null, message);
	}

	/**
	 * Agrega a la cola de mensajes, un mensaje de error con un detalle o
	 * explicacion detallada.
	 *
	 * @param summary
	 *            Mensaje general
	 * @param detail
	 *            Explicación detallada del mensaje
	 */
	protected void agregarMensajeError(String summary, String detail) {
		FacesMessage message = new FacesMessage();
		message.setSeverity(FacesMessage.SEVERITY_ERROR);
		message.setSummary(summary);
		message.setDetail(detail);
		getFacesContext().addMessage(null, message);
	}

	/**
	 * Agrega un mensaje sin detalle de advertencia a la cola de mensajes.
	 *
	 * @param mensaje
	 *            Mensaje de advertencia
	 */
	protected void agregarMensajeWarn(String mensaje) {
		FacesMessage message = new FacesMessage();
		message.setSeverity(FacesMessage.SEVERITY_WARN);
		message.setSummary(mensaje);
		message.setDetail("");
		getFacesContext().addMessage(null, message);
	}

	/**
	 * Agrega a la cola de mensajes, un mensaje tipo advertencia con un detalle
	 * o explicacion detallada.
	 *
	 * @param summary
	 *            Mensaje general
	 * @param detail
	 *            Explicación detallada del mensaje
	 */
	protected void agregarMensajeWarn(String summary, String detail) {
		FacesMessage message = new FacesMessage();
		message.setSeverity(FacesMessage.SEVERITY_WARN);
		message.setSummary(summary);
		message.setDetail(detail);
		getFacesContext().addMessage(null, message);
	}

	/**
	 * Obtiene la memoria Flash actual. <br>
	 * The Flash concept is taken from Ruby on Rails and provides a way to pass
	 * temporary objects between the user views generated by the faces
	 * lifecycle. As in Rails, anything one places in the flash will be exposed
	 * to the next view encountered by the same user session and then cleared
	 * out. It is important to note that -next view- may have the same view id
	 * as the previous view.
	 *
	 * @return Return the threadsafe {@link Flash} for this application
	 */
	protected Flash getFlash() {
		this.flash = getFacesContext().getExternalContext().getFlash();
		return this.flash;
	}

	/**
	 * Redirecciona utilizando la configuracion de faces-config.xml a partir de
	 * un outcome
	 *
	 * @param outcome
	 *            Texto a resolver
	 */
	protected void redireccionar(String outcome) {
		ConfigurableNavigationHandler handler = (ConfigurableNavigationHandler) getFacesContext().getApplication()
				.getNavigationHandler();
		handler.performNavigation(outcome);
	}

	/**
	 * Obtiene la instancia de un bean de Sesión.
	 *
	 * @param beanName
	 *            {@link String} nombre del bean de sesión que se desea obtener
	 * @return La instancia del bean de sesión
	 */
	@SuppressWarnings("unchecked")
	protected <T> T obtenerBean(String beanName) {
		Object bean = getSessionMap().get(beanName);

		if (bean == null) {
			bean = obtenerBeanEL(beanName);
		}
		return (T) bean;
	}

	/**
	 * Recupera un ManagedBean de cualquier Scope por medio de una Expression
	 * Language. En caso de que no exista una instancia inicializada, crea una
	 * nueva. Si no se encuentra un ManagedBean registrado con el nombre
	 * proporcionado el resultado es Null.
	 *
	 * @param beanName
	 *            Nombre con el que está registrado el ManagedBean
	 * @return Instancia del ManagedBean recuperada o creada
	 */
	@SuppressWarnings({"unchecked", "el-syntax"})
	private static <T> T obtenerBeanEL(String beanName) {
		FacesContext context = FacesContext.getCurrentInstance();
		String expresion = "#{" + beanName + "}";
		return (T) context.getApplication().evaluateExpressionGet(context, expresion, Object.class);
	}

	protected FacesContext getFacesContext() {
		this.facesContext = FacesContext.getCurrentInstance();
		return this.facesContext;
	}

	protected void setFacesContext(FacesContext facesContext) {
		this.facesContext = facesContext;
	}

	protected ExternalContext getExternalContext() {
		this.externalContext = getFacesContext().getExternalContext();
		return externalContext;
	}

	protected void setExternalContext(ExternalContext externalContext) {
		this.externalContext = externalContext;
	}

	protected Map<String, Object> getRequestMap() {
		this.requestMap = getFacesContext().getExternalContext().getRequestMap();
		return this.requestMap;
	}

	protected void setRequestMap(Map<String, Object> requestMap) {
		this.requestMap = requestMap;
	}

	protected Map<String, Object> getSessionMap() {
		this.sessionMap = getFacesContext().getExternalContext().getSessionMap();
		return this.sessionMap;
	}

	protected void setSessionMap(Map<String, Object> sessionMap) {
		this.sessionMap = sessionMap;
	}


}